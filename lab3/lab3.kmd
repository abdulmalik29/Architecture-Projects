KMD
00000000: EA00005F    ;         B part2; part1 or part2 or part3
00000004:             ; 
00000004: 00 00 00 00 ; buffer  DEFS 100,0
00000008: 00 00 00 00 ; 
0000000C: 00 00 00 00 ; 
00000010: 00 00 00 00 ; 
00000014: 00 00 00 00 ; 
00000018: 00 00 00 00 ; 
0000001C: 00 00 00 00 ; 
00000020: 00 00 00 00 ; 
00000024: 00 00 00 00 ; 
00000028: 00 00 00 00 ; 
0000002C: 00 00 00 00 ; 
00000030: 00 00 00 00 ; 
00000034: 00 00 00 00 ; 
00000038: 00 00 00 00 ; 
0000003C: 00 00 00 00 ; 
00000040: 00 00 00 00 ; 
00000044: 00 00 00 00 ; 
00000048: 00 00 00 00 ; 
0000004C: 00 00 00 00 ; 
00000050: 00 00 00 00 ; 
00000054: 00 00 00 00 ; 
00000058: 00 00 00 00 ; 
0000005C: 00 00 00 00 ; 
00000060: 00 00 00 00 ; 
00000064: 00 00 00 00 ; 
00000068:             ; 
00000068: 6F 6E 65 00 ; s1      DEFB "one\0"
0000006C:             ;         ALIGN
0000006C: 74 77 6F 00 ; s2      DEFB "two\0"
00000070:             ;         ALIGN
00000070: 74 68 72 65 ; s3      DEFB "three\0"
00000074: 65 00       ; 
00000078:             ;         ALIGN
00000078: 66 6F 75 72 ; s4      DEFB "four\0"
0000007C: 00          ; 
00000080:             ;         ALIGN
00000080: 66 69 76 65 ; s5      DEFB "five\0"
00000084: 00          ; 
00000088:             ;         ALIGN
00000088: 73 69 78 00 ; s6      DEFB "six\0"
0000008C:             ;         ALIGN
0000008C: 73 65 76 65 ; s7      DEFB "seven\0"
00000090: 6E 00       ; 
00000094:             ;         ALIGN
00000094: 74 77 65 6E ; s8      DEFB "twentytwo\0"
00000098: 74 79 74 77 ; 
0000009C: 6F 00       ; 
000000A0:             ;         ALIGN
000000A0: 74 77 65 6E ; s9      DEFB "twenty\0"
000000A4: 74 79 00    ; 
000000A8:             ;         ALIGN
000000A8:             ; 
000000A8:             ; ;************************** part 1 **************************
000000A8:             ; printstring
000000A8: E4D10001    ;         LDRB R0, [R1], #1
000000AC: E3500000    ;         CMP  R0, #0
000000B0: 0A000001    ;         BEQ  start
000000B4: EF000000    ;         SVC  0  
000000B8: EAFFFFFA    ;         B    printstring
000000BC:             ; ; your code goes here, replacing the previous 2 lines   
000000BC: E3A0000A    ; start   MOV  R0, #10    ; given - output end-of-line
000000C0: EF000000    ;         SVC  0          ; given
000000C4: E1A0F00E    ;         MOV  PC, LR     ; given
000000C8:             ; 
000000C8:             ; ;************************** part 2 ***************************
000000C8:             ; strcat
000000C8:             ; ; your code goes here
000000C8: E5516000    ;         LDRB R6, [R1]
000000CC: E3560000    ;         CMP  R6, #0        
000000D0: 0A000001    ;         BEQ  loop
000000D4: E2811001    ;         ADD  R1, R1, #1
000000D8: 1AFFFFFA    ;         BNE  strcat
000000DC:             ; 
000000DC: E4D27001    ; loop    LDRB R7, [R2], #1
000000E0: E4C17001    ;         STRB R7, [R1], #1
000000E4: E3570000    ;         CMP  R7, #0
000000E8: 1AFFFFFB    ;         BNE  loop
000000EC: E1A0F00E    ;         MOV  PC, LR
000000F0:             ; 
000000F0:             ; strcpy
000000F0:             ; ; your code goes here
000000F0: E4D27001    ;         LDRB R7, [R2], #1
000000F4: E4C17001    ;         STRB R7, [R1], #1
000000F8: E3570000    ;         CMP  R7, #0
000000FC: 1AFFFFFB    ;         BNE  strcpy
00000100: E1A0F00E    ;         MOV  PC, LR
00000104:             ; ;************************** part 3 **************************
00000104: E58FE028    ; sorted  STR LR, return2 ; given
00000108:             ; ; your code goes here
00000108:             ; 
00000108: E4D34001    ; again   LDRB R4, [R3], #1
0000010C: E4D25001    ;         LDRB R5, [R2], #1
00000110: E3540000    ;         CMP  R4, #0
00000114: 0A000004    ;         BEQ  skip
00000118: E3540000    ;         CMP  R4, #0
0000011C: 0A000002    ;         BEQ  skip
00000120: E1550004    ;         CMP  R5, R4
00000124: 1A000000    ;         BNE  skip
00000128: EAFFFFF6    ;         B    again
0000012C:             ;         
0000012C: E1540005    ; skip    CMP  R4, R5
00000130: E51FF004    ;         LDR  PC, return2 ; given
00000134: 00000000    ; return2 DEFW 0          ; given
00000138:             ; 
00000138:             ; ;*********************** the various parts ********************
00000138: E24F10D8    ; part1   ADR R1, s1
0000013C: EBFFFFD9    ;         BL  printstring
00000140: E24F10DC    ;         ADR R1, s2
00000144: EBFFFFD7    ;         BL  printstring
00000148: E24F10E0    ;         ADR R1, s3
0000014C: EBFFFFD5    ;         BL  printstring
00000150: E24F10E0    ;         ADR R1, s4
00000154: EBFFFFD3    ;         BL  printstring
00000158: E24F10E0    ;         ADR R1, s5
0000015C: EBFFFFD1    ;         BL  printstring
00000160: E24F10E0    ;         ADR R1, s6
00000164: EBFFFFCF    ;         BL  printstring
00000168: E24F10E4    ;         ADR R1, s7
0000016C: EBFFFFCD    ;         BL  printstring
00000170: E24F10E4    ;         ADR R1, s8
00000174: EBFFFFCB    ;         BL  printstring
00000178: E24F10E0    ;         ADR R1, s9
0000017C: EBFFFFC9    ;         BL  printstring
00000180: EF000002    ;         SVC 2
00000184:             ; 
00000184: E24F2F49    ; part2   ADR R2, s1
00000188: E24F1F63    ;         ADR R1, buffer
0000018C: EBFFFFD7    ;         BL  strcpy
00000190: E24F1F65    ;         ADR R1, buffer
00000194: EBFFFFC3    ;         BL  printstring
00000198: E24F2F4D    ;         ADR R2, s2
0000019C: E24F1E1A    ;         ADR R1, buffer
000001A0: EBFFFFC8    ;         BL  strcat
000001A4: E24F1F6A    ;         ADR R1, buffer
000001A8: EBFFFFBE    ;         BL  printstring
000001AC: E24F2F51    ;         ADR R2, s3
000001B0: E24F1F6D    ;         ADR R1, buffer
000001B4: EBFFFFC3    ;         BL  strcat
000001B8: E24F1F6F    ;         ADR R1, buffer
000001BC: EBFFFFB9    ;         BL  printstring
000001C0: EF000002    ;         SVC 2
000001C4:             ; 
000001C4:             ; ; used by part3
000001C4: 00000000    ; return4 DEFW 0,0
000001C8: 00000000    ; 
000001CC: E50FE010    ; test2   STR LR, return4         ; This mechanism will be improved later
000001D0: E50F3010    ;         STR R3, return4+4       ; Assembler will evaluate addition      
000001D4: E1A00002    ;         MOV R0, R2
000001D8: EF000003    ;         SVC 3
000001DC: EBFFFFC8    ;         BL  sorted
000001E0: B3A0003C    ;         MOVLT R0, #'<'          ; Three-way IF using conditions
000001E4: 03A0003D    ;         MOVEQ R0, #'='
000001E8: C3A0003E    ;         MOVGT R0, #'>'
000001EC: EF000000    ;         SVC 0
000001F0: E51F0030    ;         LDR R0, return4+4
000001F4: EF000003    ;         SVC 3
000001F8: E3A0000A    ;         MOV R0, #10
000001FC: EF000000    ;         SVC 0
00000200: E51FF044    ;         LDR PC, return4
00000204:             ; 
00000204: E24F2F69    ; part3   ADR R2, s1
00000208: E24F3F69    ;         ADR R3, s2
0000020C: EBFFFFEE    ;         BL  test2
00000210: E24F2F6B    ;         ADR R2, s2
00000214: E24F3F6B    ;         ADR R3, s3
00000218: EBFFFFEB    ;         BL  test2
0000021C: E24F2F6D    ;         ADR R2, s3
00000220: E24F3E1B    ;         ADR R3, s4
00000224: EBFFFFE8    ;         BL  test2
00000228: E24F2F6E    ;         ADR R2, s4
0000022C: E24F3F6D    ;         ADR R3, s5
00000230: EBFFFFE5    ;         BL  test2
00000234: E24F2F6F    ;         ADR R2, s5
00000238: E24F3F6E    ;         ADR R3, s6
0000023C: EBFFFFE2    ;         BL  test2
00000240: E24F2D07    ;         ADR R2, s6
00000244: E24F3D07    ;         ADR R3, s7
00000248: EBFFFFDF    ;         BL  test2
0000024C: E24F2F72    ;         ADR R2, s7
00000250: E24F3F71    ;         ADR R3, s8
00000254: EBFFFFDC    ;         BL  test2
00000258: E24F2F73    ;         ADR R2, s8
0000025C: E24F3F71    ;         ADR R3, s9
00000260: EBFFFFD9    ;         BL  test2
00000264: E24F2F76    ;         ADR R2, s8
00000268: E24F3F77    ;         ADR R3, s8
0000026C: EBFFFFD6    ;         BL  test2
00000270: EF000002    ;         SVC 2
00000274:             ; 

Symbol Table: Labels
: buffer                            00000004  Local -- ARM
: s1                                00000068  Local -- ARM
: s2                                0000006C  Local -- ARM
: s3                                00000070  Local -- ARM
: s4                                00000078  Local -- ARM
: s5                                00000080  Local -- ARM
: s6                                00000088  Local -- ARM
: s7                                0000008C  Local -- ARM
: s8                                00000094  Local -- ARM
: s9                                000000A0  Local -- ARM
: printstring                       000000A8  Local -- ARM
: start                             000000BC  Local -- ARM
: strcat                            000000C8  Local -- ARM
: loop                              000000DC  Local -- ARM
: strcpy                            000000F0  Local -- ARM
: sorted                            00000104  Local -- ARM
: again                             00000108  Local -- ARM
: skip                              0000012C  Local -- ARM
: return2                           00000134  Local -- ARM
: part1                             00000138  Local -- ARM
: part2                             00000184  Local -- ARM
: return4                           000001C4  Local -- ARM
: test2                             000001CC  Local -- ARM
: part3                             00000204  Local -- ARM
