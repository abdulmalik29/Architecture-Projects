KMD
00000000:             ; ; COMP15111 lab 4 - Template file
00000000:             ; 
00000000:             ; print_char      equ     0               ; Define names to aid readability
00000000:             ; stop            equ     2
00000000:             ; print_str       equ     3
00000000:             ; print_no        equ     4
00000000:             ; 
00000000:             ; cLF             equ     10              ; Line-feed character
00000000:             ; 
00000000:             ; 
00000000: E28FD064    ;                 ADR     SP, _stack      ; set SP pointing to the end of our stack
00000004: EA00007A    ;                 B       main
00000008:             ; 
00000008:             ;                 DEFS    100             ; this chunk of memory is for the stack
0000006C:             ; _stack                                  ; This label is 'just after' the stack space
0000006C:             ; 
0000006C:             ; 
0000006C: 54 68 69 73 ; wasborn         DEFB    "This person was born on ",0
00000070: 20 70 65 72 ; 
00000074: 73 6F 6E 20 ; 
00000078: 77 61 73 20 ; 
0000007C: 62 6F 72 6E ; 
00000080: 20 6F 6E 20 ; 
00000084: 00          ; 
00000085: 54 68 69 73 ; was             DEFB    "This person was ",0
00000089: 20 70 65 72 ; 
0000008D: 73 6F 6E 20 ; 
00000091: 77 61 73 20 ; 
00000095: 00          ; 
00000096: 20 6F 6E 20 ; on              DEFB    " on ",0
0000009A: 00          ; 
0000009B: 54 68 69 73 ; is              DEFB    "This person is ",0
0000009F: 20 70 65 72 ; 
000000A3: 73 6F 6E 20 ; 
000000A7: 69 73 20 00 ; 
000000AB: 20 74 6F 64 ; today           DEFB    " today!",0
000000AF: 61 79 21 00 ; 
000000B3: 54 68 69 73 ; willbe          DEFB    "This person will be ",0
000000B7: 20 70 65 72 ; 
000000BB: 73 6F 6E 20 ; 
000000BF: 77 69 6C 6C ; 
000000C3: 20 62 65 20 ; 
000000C7: 00          ; 
000000C8:             ;                 ALIGN
000000C8:             ; 
000000C8: 00000017    ; pDay              DEFW  23              ;  pDay = 23    //or whatever is today's date
000000CC: 0000000B    ; pMonth          DEFW    11              ;  pMonth = 11  //or whatever is this month
000000D0: 000007D5    ; pYear             DEFW  2005    ;  pYear = 2005 //or whatever is this year
000000D4:             ; 
000000D4:             ; 
000000D4:             ; ; def printAgeHistory (bDay, bMonth, bYear)
000000D4:             ; 
000000D4:             ; ; parameters
000000D4:             ; ;  R0 = bDay (on entry, moved to R6 to allow SVC to output via R0)
000000D4:             ; ;  R1 = bMonth
000000D4:             ; ;  R2 = bYear
000000D4:             ; ; local variables (callee-saved registers)
000000D4:             ; ;  R4 = year
000000D4:             ; ;  R5 = age
000000D4:             ; ;  R6 = bDay - originally R0
000000D4:             ; 
000000D4: E92D0070    ; printAgeHistory STMFD SP!, {R4, R5 ,R6}                 ; callee saves three registers
000000D8:             ; 
000000D8:             ; 
000000D8:             ; ;   year = bYear + 1
000000D8: E2824000    ;                 ADD     R4, R2, #0
000000DC:             ; ;   age = 1;
000000DC: E3A05001    ;                 MOV     R5, #1
000000E0:             ; 
000000E0:             ; ; print("This person was born on " + str(bDay) + "/" + str(bMonth) + "/" + str(bYear))
000000E0: E24F007C    ;                 ADRL    R0, wasborn
000000E4: EF000003    ;                 SVC     print_str               
000000E8: EB00002B    ;                 BL       Date
000000EC: E2824001    ;                 ADD     R4, R2, #1
000000F0:             ; ; this code does: while year < pYear //{
000000F0: E51F0028    ; loop1   LDR     R0, pYear
000000F4: E1540000    ;                 CMP     R4, R0
000000F8: 2A000009    ;                 BHS     end1            ; Years are unsigned
000000FC:             ; ; for part 4, should be changed to:
000000FC:             ; ; while year < pYear or
000000FC:             ; ;                               (year == pYear and bMonth < pMonth) or
000000FC:             ; ;                               (year == pYear and bMonth == pMonth and bDay < pDay):
000000FC:             ; 
000000FC:             ; ;  print("This person was " + str(age) + " on " + str(bDay) + "/" + str(bMonth) + "/" + str(yea
                      ; r))
000000FC: E24F007F    ;                 ADRL    R0, was
00000100: EF000003    ;                 SVC     print_str
00000104: E1A00005    ;                 MOV     R0, R5
00000108: EF000004    ;                 SVC     print_no
0000010C: E24F007E    ;                 ADRL    R0, on
00000110: EF000003    ;                 SVC     print_str
00000114: EB000020    ;                 BL      Date
00000118:             ; 
00000118:             ;                 ; year = year + 1
00000118: E2844001    ;                 ADD     R4, R4, #1
0000011C:             ;                 ; age = age + 1
0000011C: E2855001    ;                 ADD     R5, R5, #1
00000120:             ;                 ; //}
00000120: EAFFFFF2    ;                 B       loop1
00000124:             ; 
00000124:             ; end1
00000124:             ; ; this code does: if (bMonth == pMonth):
00000124:             ; ; for part 4, should be changed to:
00000124:             ; ; if (bMonth == pMonth and bDay == pDay):
00000124: E51F0060    ;                 LDR     R0, pMonth
00000128: E1510000    ;                 CMP     R1, R0
0000012C: 1A000008    ;                 BNE     else1
00000130:             ; 
00000130:             ; ; print("This person is " + str(age) + " today!")
00000130: E24F009D    ;                 ADRL    R0, is
00000134: EF000003    ;                 SVC     print_str
00000138: E1A00005    ;                 MOV     R0, R5
0000013C: EF000004    ;                 SVC     print_no
00000140: E24F009D    ;                 ADRL    R0, today
00000144: EF000003    ;                 SVC     print_str
00000148: E3A0000A    ;                 MOV     R0, #cLF
0000014C: EF000000    ;                 SVC     print_char
00000150:             ; 
00000150:             ; ; else
00000150: EA00001E    ;                 B       end2
00000154:             ; else1
00000154:             ; ; print("This person will be " + str(age) + " on " + str(bDay) + "/" + str(bMonth) + "/" + str(
                      ; year))
00000154: E24F00A9    ;                 ADRL    R0, willbe
00000158: EF000003    ;                 SVC     print_str
0000015C: E1A00005    ;                 MOV     R0, R5
00000160: EF000004    ;                 SVC     print_no
00000164: E24F00D6    ;                 ADRL    R0, on
00000168: EF000003    ;                 SVC     print_str
0000016C: E1A00003    ;                 MOV     R0, R3
00000170: EF000004    ;                 SVC     print_no
00000174: E3A0002F    ;                 MOV     R0, #'/'
00000178: EF000000    ;                 SVC     print_char
0000017C: E1A00001    ;                 MOV     R0, R1
00000180: EF000004    ;                 SVC     print_no
00000184: E3A0002F    ;                 MOV     R0, #'/'
00000188: EF000000    ;                 SVC     print_char
0000018C: E1A00004    ;                 MOV     R0, R4
00000190: EF000004    ;                 SVC     print_no
00000194: E3A0000A    ;                 MOV     R0, #cLF
00000198: EF000000    ;                 SVC     print_char
0000019C:             ; 
0000019C: E1A00003    ; Date            MOV     R0, R3
000001A0: EF000004    ;                 SVC     print_no
000001A4: E3A0002F    ;                 MOV     R0, #'/'
000001A8: EF000000    ;                 SVC     print_char
000001AC: E1A00001    ;                 MOV     R0, R1
000001B0: EF000004    ;                 SVC     print_no
000001B4: E3A0002F    ;                 MOV     R0, #'/'
000001B8: EF000000    ;                 SVC     print_char
000001BC: E1A00004    ;                 MOV     R0, R4
000001C0: EF000004    ;                 SVC     print_no
000001C4: E3A0000A    ;                 MOV     R0, #cLF
000001C8: EF000000    ;                 SVC     print_char
000001CC: E1A0F00E    ;                 MOV     PC, LR
000001D0:             ; 
000001D0:             ; ; }// end of printAgeHistory
000001D0: E8BD0010    ; end2            LDMFD SP!, {R4}         ; callee saved registers
000001D4: E8BD0020    ;                 LDMFD SP!, {R5}
000001D8: E8BD0040    ;                 LDMFD SP!, {R6}
000001DC: E1A0E007    ;                 MOV     LR, R7
000001E0: E1A0F00E    ;                 MOV     PC, LR
000001E4:             ; 
000001E4: 41 6E 6F 74 ; another         DEFB    "Another person",10,0
000001E8: 68 65 72 20 ; 
000001EC: 70 65 72 73 ; 
000001F0: 6F 6E 0A 00 ; 
000001F4:             ;                 ALIGN
000001F4:             ; 
000001F4:             ; ; def main():
000001F4:             ; main
000001F4: E59F40B0    ;         LDR     R4, =&12345678          ; Test value - not part of Java compilation
000001F8: E1A05004    ;         MOV     R5, R4                  ; See later if these registers corrupted
000001FC: E1A06004    ;         MOV     R6, R4
00000200:             ; 
00000200:             ; ; printAgeHistory(pDay, pMonth, 2000)
00000200: E51F3140    ;                 LDR     R3, pDay
00000204: E51F1140    ;                 LDR     R1, pMonth
00000208: E3A02E7D    ;                 MOV     R2, #2000
0000020C: E28F7000    ;                 ADR     R7, then
00000210: EBFFFFAF    ;                 BL      printAgeHistory
00000214:             ; 
00000214:             ; 
00000214:             ; ; print("Another person");
00000214: E24F0038    ; then            ADRL    R0, another
00000218: EF000003    ;                 SVC     print_str
0000021C:             ; 
0000021C:             ; ; printAgeHistory(13, 11, 2000)
0000021C: E3A0300D    ;                 MOV     R3, #13
00000220: E3A0100B    ;                 MOV     R1, #11
00000224: E3A02E7D    ;                 MOV     R2, #2000
00000228: E28F7000    ;                 ADR     R7, next
0000022C: EBFFFFA8    ;                 BL      printAgeHistory
00000230:             ; 
00000230:             ; 
00000230:             ;         ; Now check to see if register values intact (Not part of Java)
00000230: E59F0074    ; next    LDR     R0, =&12345678          ; Test value
00000234: E1540000    ;         CMP     R4, R0                  ; Did you preserve these registers?
00000238: 01550000    ;         CMPEQ   R5, R0                  ;
0000023C: 01560000    ;         CMPEQ   R6, R0                  ;
00000240:             ; 
00000240: 128F0014    ;         ADRLNE  R0, whoops1             ; Oh dear!
00000244: 1F000003    ;         SVCNE   print_str               ;
00000248:             ; 
00000248: E24F0F79    ;         ADRL    R0, _stack              ; Have you balanced pushes & pops?
0000024C: E15D0000    ;         CMP     SP, R0                  ;
00000250:             ; 
00000250: 128F002A    ;         ADRLNE  R0, whoops2             ; Oh no!!
00000254: 1F000003    ;         SVCNE   print_str               ; End of test code
00000258:             ; 
00000258:             ; ; }// end of main
00000258: EF000002    ;                 SVC     stop
0000025C:             ; 
0000025C:             ; 
0000025C: 0A 2A 2A 20 ; whoops1         DEFB    "\n** BUT YOU CORRUPTED REGISTERS!  **\n", 0
00000260: 42 55 54 20 ; 
00000264: 59 4F 55 20 ; 
00000268: 43 4F 52 52 ; 
0000026C: 55 50 54 45 ; 
00000270: 44 20 52 45 ; 
00000274: 47 49 53 54 ; 
00000278: 45 52 53 21 ; 
0000027C: 20 20 2A 2A ; 
00000280: 0A 00       ; 
00000282: 0A 2A 2A 20 ; whoops2         DEFB    "\n** BUT YOUR STACK DIDN'T BALANCE!  **\n", 0
00000286: 42 55 54 20 ; 
0000028A: 59 4F 55 52 ; 
0000028E: 20 53 54 41 ; 
00000292: 43 4B 20 44 ; 
00000296: 49 44 4E 27 ; 
0000029A: 54 20 42 41 ; 
0000029E: 4C 41 4E 43 ; 
000002A2: 45 21 20 20 ; 
000002A6: 2A 2A 0A 00 ; 
000002AA:             ; 
000002AA:             ; 
000002AA:             ; 
000002AA:             ; 
000002AA:             ; 
000002AA: 00 00       ; (padding)
000002AC: 12345678    ; Remaining literals

Symbol Table: Labels
: print_char                        00000000  Value
: stop                              00000002  Value
: print_str                         00000003  Value
: print_no                          00000004  Value
: cLF                               0000000A  Value
: _stack                            0000006C  Local -- ARM
: wasborn                           0000006C  Local -- ARM
: was                               00000085  Local -- ARM
: on                                00000096  Local -- ARM
: is                                0000009B  Local -- ARM
: today                             000000AB  Local -- ARM
: willbe                            000000B3  Local -- ARM
: pDay                              000000C8  Local -- ARM
: pMonth                            000000CC  Local -- ARM
: pYear                             000000D0  Local -- ARM
: printAgeHistory                   000000D4  Local -- ARM
: loop1                             000000F0  Local -- ARM
: end1                              00000124  Local -- ARM
: else1                             00000154  Local -- ARM
: Date                              0000019C  Local -- ARM
: end2                              000001D0  Local -- ARM
: another                           000001E4  Local -- ARM
: main                              000001F4  Local -- ARM
: then                              00000214  Local -- ARM
: next                              00000230  Local -- ARM
: whoops1                           0000025C  Local -- ARM
: whoops2                           00000282  Local -- ARM
